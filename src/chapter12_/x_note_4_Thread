    Java与线程
        1）线程的实现：
        1 > 使用内核线程实现：
            内核线程（Kernal-Level Thread）就是由操作系统内核（Kernal）直接支持的线程，这种线程直接由内核完成线程切换，内核通过操纵调度器（Scheduler）
        对线程进行切换，并负责将线程的任务映射至各个处理器上。每个内核线程可以认为是内核的一个分支，这样操作系统就有能力同时处理多个事情，支持多线程的
        内核叫作多线程内核（Multi-Threads Kernal）。
            程序一般不会直接去使用内核线程，而是使用内核线程的一种高级接口，轻量级进程(Light Weight Process，LWP)，每个轻量级进程由一个内核线程支持。
        轻量级线程和内核线程之间1:1的关系成为一对一的线程模型。
           轻量级进程有他的局限性：首先是基于内核实现的，所以各种线程创建，析构，同步等有需要进行系统调用，系统调用的代价是高昂的，需要在用户态（User Mode）
        和内核态（Kernal Mode）中来回切换。其次，每个轻量级线程需要一个内核线程支持，因此需要消耗一定的内核资源，因此一个系统支持的轻量级进程的数量是
        有限的。

        2 > 使用用户线程实现，

        3 > 使用用户线程加轻量级进程混合实现，
            将内核线程和用户线程一起使用，用户线程还是完全建立在用户空间中，因此线程的创建，析构，切换的代价依然低廉，并且支持大规模用户线程并发。而操
        作系统提供的轻量级进程则作为用户线程和内核线程之间的桥梁，这样就可以使用内核提供的线程调度功能及处理器映射，并且用户线程的系统调用依赖于轻量级
        线程，这样大大降低了进程被完全阻塞的风险。
            这种混合模式下，用户进程和轻量级进程的数量比是不定的，即为N:M关系，这就是多对多的线程模型。

        4 > Java线程实现，

        2）Java线程调度

        3）状态转换


