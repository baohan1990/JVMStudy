1.jvm运行时数据区域
    程序计数器;是一个线程私有的内存区域，可以看成当前线程所执行字节码的行号指示器。
    如果线程正在执行的是一个java方法，那么这个计数器记录的是正在执行的虚拟机字节码指令的地址，如果当前线程正在执行的是一个Native方法，则这个指示器为空
 (Undefined)。

    jvm虚拟机栈：java虚拟机栈也是线程私有的，其生命周期与线程相同，java虚拟机栈记录的是java方法执行的内存模型，每个方法在执行的同时会创建一个栈帧（Stack Frame）
 用于存储局部变量表，操作数栈，动态链接，方法出口等信息。
    -->局部变量表存储了各种基本数据类型，对象引用和returnAdress类型，局部变量表所需的内存空间在编译期完成分配，在方法运行期不会改变局部变量表的大小。
    -->当线程请求的栈深度大于虚拟机所允许的栈深度时，抛出StackOverFlowError，如果扩展时无法申请到足够的内存时，将抛出OutOfMemoryError。

    本地方法栈与虚拟机栈相类似，他们之间的区别在于本地方法栈为虚拟机中使用的Native该方法服务，本地方法栈也会抛出StackOverFlowError和OutOfMemoryError。

    java堆：java堆(Java Heap)是被所有线程所共享的一块内存区域，在虚拟机启动时创建，此内存区域存在的唯一目的就是存放java实例。
    -->java堆的划分是为了更快的回收内存，更好的分配内存。

    方法区：和java堆一样，是各线程所共享的一块内存空间，用于存储被虚拟机所加载的类信息，常量，静态常量，即时编译器所编译后的代码等数据。

    运行时常量池：常量池是方法区的一部分，用于存放编译期生成的各种字面量和符号信息，这部分内容将在类加载后进入方法区的常量池。

    直接内存：避免在native堆和java堆中来回复制

