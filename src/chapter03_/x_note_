内存的自动管理主要是指给对象自动分配内存，和对分配给对象的内存的回收

1.java垃圾收集器主要关注的是，堆，方法区，运行时常量池中内存的回收，

2.判断对象是否是垃圾：
    1)引用计数法，简单高效，但是不能解决循环引用的问题，
    2)可达性分析算法
        有一系列的称为“GC Roots”的对象作为起点，从这些节点向下搜索，搜索所经过的路径称为引用链，当一个对象从GC ROOTS没有任何引用链相连时，就是
    GC ROOTS到这个对象不可达时，则证明这个对象是无用的。
        java语言中，可以作为GC ROOTS的对象有：
        虚拟机栈中（栈帧中的局部变量表）中引用的对象
        本地方法栈中JNI(即一般所说的Native方法)引用的对象
        方法区中静态属性引用的对象
        方法区中常量应用的对象

        对象在进行可达性后发现没有与GC ROOTS相链接后，仍然后一次逃脱垃圾回收的机会，当该对象的类覆盖了finalize()方法而且finalize()方法之前没有被调用过。
        如果符合这个条件，那么对象会被放入一个叫F-Queue的队列中，并在稍后由一个虚拟机自动建立的，低优先级的Finalizer线程去执行他。
        finalize()是对象逃脱垃圾回收的最后一次机会。

        方法区的回收，主要是对废弃的常量和无用的类的回收。废弃常量和对象回收相类似，从GC ROOTS不可达的常量可以被废弃，常量池中其他类（接口），方法，字段的
    的符号引用也与此相类似。
        无用的类的判断：1>该类所有的实例已经被回收
                        2>加载该类的ClassLoader已经被回收
                        3>该类对应的java.lang.class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。
